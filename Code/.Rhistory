require("reticulate")
source_python("pickle_reader.py")
pickle_data <- read_pickle_file("../Data/cincyWebsites.pkl") %>% fromJSON()
library(pacman)
p_load(RCurl, jsonlite, reticulate,
readxl, tidyverse, RColorBrewer, plotly,
tools, DT, formattable)
source_python("pickle_reader.py")
pickle_data <- read_pickle_file("../Data/cincyWebsites.pkl") %>% fromJSON()
View(pickle_data)
a = pickle_data[["records"]]
a = pickle_data[["whois"]]
a = pickle_data[["records"]]
View(a)
str(a)
b = as.data.frame(a)
b = data.frame(a)
View(b)
a[1,8]
a[1,6]
a[1,1]
b = ldply(a, data.frame)
library(plyr)
b = ldply(a, data.frame)
a[,1]
a[,2:6] %>% head()
temp1 <- a[,1] # This is a data frame of 3 columns
temp2 <- a[,2:6]
b = cbind(temp1, temp2)
a= b
b$computed %>% head()
20*60/1.2
a$expiresDate <- as.POSIXct(as.numeric(as.character(a$expiresDate)),origin="1970-01-01",tz="GMT")
View(a)
as.POSIXct.default("a$createdDate", tz="GMT") %>% head()
as.POSIXct.default(a$createdDate, tz="GMT") %>% head()
as.POSIXct(a$createdDate, tz="GMT", origin = "1970-01-01") %>% head()
a$createdDate[1]
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
out.width = "100%",
warning = FALSE,
message = FALSE,
results = "asis")
source_python("pickle_reader.py")
top100sites_cincy <- read_pickle_file("../Data/cincyWebsites.pkl") %>%
fromJSON()
top100sites_cincy <- top100sites_cincy[["records"]]
source_python("pickle_reader.py")
top100sites_cincy <- read_pickle_file("../Data/cincyWebsites.pkl") %>%
fromJSON()
top100sites_cincy <- top100sites_cincy[["records"]]
# Formatting is somewhat weird since the resulting data frame has
# Two data frames within it (which is making indexing a bit weird)
# Therefore, we create two temp dfs and then merge them using cbind
temp1 <- top100sites_cincy[,1] # This is a data frame of 3 columns
temp2 <- top100sites_cincy[,2:6]
top100sites_cincy <- cbind(temp1, temp2)
top100sites_cincy %>% formattable() %>% as.datatable()
View(top100sites_cincy)
top100sites_cincy %>% head()
top100sites_cincy %>% head() %>% as.data.frame() %>% formattable() %>% as.datatable()
top100sites_cincy %>% na.omit() %>% as.data.frame() %>% formattable() %>% as.datatable()
a <- top100sites_cincy %>% na.omit()
View(a)
write.csv(top100sites_cincy, "../Results/topcincy.csv")
typeof(top100sites_cincy[,1:8])
typeof(top100sites_cincy[,1])
typeof(top100sites_cincy[,2])
typeof(top100sites_cincy[,3])
typeof(top100sites_cincy[,4])
typeof(top100sites_cincy[,5])
typeof(top100sites_cincy[,6])
typeof(top100sites_cincy[,7])
typeof(top100sites_cincy[,8])
c = top100sites_cincy[,7][[]]
c = top100sites_cincy[,7][[1]]
class(temp1)
class(temp2)
p_load(IRanges)
a = top100sitescincy %>% expand()
a = top100sites_cincy %>% expand()
sapply(top100sites_cincy, class)
colTypes <- sapply(top100sites_cincy, class)
which(colTypes %in% c("data.frame","list"))
12*60
12*90
12*80
12*85
querystring = {"apikey":"7GpQJYMryiL24bulfUWmqiQgeRrExUKx", "page":"2"}
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
out.width = "100%",
warning = FALSE,
message = FALSE,
results = "asis")
source_python("pickle_reader.py") #
df <- {}
for (counter in 1:50) {
pickleData <- read_pickle_file(paste0("../Data/cincyWebsites",counter,".pkl"))%>%
fromJSON()
# Formatting is somewhat weird since the resulting data frame has
# Two data frames within it (which is making indexing a bit weird)
# Therefore, we create two temp dfs and then merge them using cbind
pickleData <- pickleData[["records"]]
temp1 <- pickleData[,1] # This is a data frame of 3 columns
temp2 <- pickleData[,2:6]
pickleData <- cbind(temp1, temp2)
colTypes <- sapply(pickleData, class)
colNums <- which(colTypes %in% c("data.frame","list"))
pickleData[colNums] <- sapply(pickleData, as.vector)
df <- rbind(df, pickleData)
pickleData <- {}
}
rm(list = ls()) # clear global environment
graphics.off() # close all graphics
library(pacman) # needs to be installed first
# p_load is equivalent to combining both install.packages() and library()
p_load(RCurl, jsonlite, reticulate,
readxl, tidyverse, RColorBrewer, plotly,
tools, DT, formattable)
source_python("pickle_reader.py") #
df <- {}
for (counter in 1:50) {
pickleData <- read_pickle_file(paste0("../Data/cincyWebsites",counter,".pkl"))%>%
fromJSON()
# Formatting is somewhat weird since the resulting data frame has
# Two data frames within it (which is making indexing a bit weird)
# Therefore, we create two temp dfs and then merge them using cbind
pickleData <- pickleData[["records"]]
temp1 <- pickleData[,1] # This is a data frame of 3 columns
temp2 <- pickleData[,2:6]
pickleData <- cbind(temp1, temp2)
colTypes <- sapply(pickleData, class)
colNums <- which(colTypes %in% c("data.frame","list"))
pickleData[colNums] <- sapply(pickleData, as.vector)
df <- rbind(df, pickleData)
pickleData <- {}
}
unlink('entrepreneurship_southwest_ohio_cache', recursive = TRUE)
rm(list = ls()) # clear global environment
graphics.off() # close all graphics
library(pacman) # needs to be installed first
# p_load is equivalent to combining both install.packages() and library()
p_load(RCurl, jsonlite, reticulate,
readxl, tidyverse, RColorBrewer, plotly,
tools, DT, formattable)
source_python("pickle_reader.py") #
for (counter in 1:50) {
pickleData <- read_pickle_file(paste0("../Data/cincyWebsites",counter,".pkl"))%>%
fromJSON()
# Formatting is somewhat weird since the resulting data frame has
# Two data frames within it (which is making indexing a bit weird)
# Therefore, we create two temp dfs and then merge them using cbind
pickleData <- pickleData[["records"]]
temp1 <- pickleData[,1] # This is a data frame of 3 columns
temp2 <- pickleData[,2:6]
pickleData <- cbind(temp1, temp2)
colTypes <- sapply(pickleData, class)
colNums <- which(colTypes %in% c("data.frame","list"))
pickleData[colNums] <- sapply(pickleData, as.vector)
df <- rbind(df, pickleData)
pickleData <- {}
}
df <- {}
for (counter in 1:50) {
pickleData <- read_pickle_file(paste0("../Data/cincyWebsites",counter,".pkl"))%>%
fromJSON()
# Formatting is somewhat weird since the resulting data frame has
# Two data frames within it (which is making indexing a bit weird)
# Therefore, we create two temp dfs and then merge them using cbind
pickleData <- pickleData[["records"]]
temp1 <- pickleData[,1] # This is a data frame of 3 columns
temp2 <- pickleData[,2:6]
pickleData <- cbind(temp1, temp2)
colTypes <- sapply(pickleData, class)
colNums <- which(colTypes %in% c("data.frame","list"))
pickleData[colNums] <- sapply(pickleData, as.vector)
df <- rbind(df, pickleData)
pickleData <- {}
}
df$createdDate <- as.Date(as.POSIXct(df$createdDate*0.001,
origin="1970-01-01"))
df$expiresDate <- as.Date(as.POSIXct(df$expiresDate*0.001,
origin="1970-01-01"))
write.csv(df, "../Data/cincyWebsites.csv", row.names = F)
df %>% formattable() %>% as.datatable()
library(rvest)
wayback_scrape(wayback_url(url =
"https://www.python.org/psf/members/",
timestamp = "20140101")$url,
"#board-of-directors li , #board-of-directors h1")
install.packages(c("httr", "jsonlite", "rvest"))
devtools::install_github("jsta/wayback")
install.packages(c("httr", "jsonlite", "rvest"))
library(wayback)
devtools::install_github("jsta/wayback")
install.packages("glue")
devtools::install_github("jsta/wayback")
install.packages("Rcpp")
devtools::install_github("jsta/wayback")
install.packages(c("assertthat", "backports", "bibliometrix", "broom", "callr", "caret", "caTools", "cli", "clipr", "colorspace", "data.table", "DataExplorer", "dataPreparation", "dendextend", "devtools", "dtwclust", "dvmisc", "e1071", "ecp", "fs", "gganimate", "ggforce", "ggplot2", "git2r", "gower", "gtable", "highr", "httpuv", "kableExtra", "knitr", "lazyeval", "lme4", "MALDIquant", "mclust", "MVN", "pacman", "padr", "pkgbuild", "plotly", "pls", "polyclip", "polynom", "pracma", "processx", "purrr", "quantmod", "ranger", "RcppArmadillo", "readxl", "recipes", "RefManageR", "remotes", "reticulate", "rgdal", "rgl", "rJava", "rlang", "rmarkdown", "robustbase", "RSpectra", "rstudioapi", "rticles", "shiny", "tibble", "tinytex", "uroot", "usethis", "xfun", "XML", "zip", "zoo"))
install.packages(c("class", "cluster", "codetools", "MASS", "Matrix", "mgcv", "nlme", "rpart", "survival"), lib="C:/Program Files/R/R-3.5.2/library")
install.packages(c("assertthat", "backports", "bibliometrix", "broom", "callr", "caret", "caTools", "cli", "clipr", "colorspace", "data.table", "DataExplorer", "dataPreparation", "dendextend", "devtools", "dtwclust", "dvmisc", "e1071", "ecp", "fs", "gganimate", "ggforce", "ggplot2", "git2r", "gower", "gtable", "highr", "httpuv", "kableExtra", "knitr", "lazyeval", "lme4", "MALDIquant", "mclust", "MVN", "pacman", "padr", "pkgbuild", "plotly", "pls", "polyclip", "polynom", "pracma", "processx", "purrr", "quantmod", "ranger", "RcppArmadillo", "readxl", "recipes", "RefManageR", "remotes", "reticulate", "rgdal", "rgl", "rJava", "rlang", "rmarkdown", "robustbase", "RSpectra", "rstudioapi", "rticles", "shiny", "tibble", "tinytex", "uroot", "usethis", "xfun", "XML", "zip", "zoo"))
unlink('entrepreneurship_southwest_ohio_cache', recursive = TRUE)
install.packages("formattable")
