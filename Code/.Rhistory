p_load(haven, dplyr, caret, foreign, glmnet,
lubridate, dataPreparation, httr, DT, stringr, AUC, snow,
testit, caretEnsemble,
C50,
randomForest,
kernlab,
e1071, Boruta)
library(pacman)
p_load(haven, dplyr, caret, foreign, glmnet,
lubridate, dataPreparation, httr, DT, stringr, AUC, snow,
testit, caretEnsemble,
C50,
randomForest,
kernlab,
e1071, Boruta)
heart.df <- read_sas("../../Data/thoracic_data.sas7bdat")
column.classes <- sapply(heart.df, class)
table(column.classes)
View(column.classes)
column.classes <- mapply(heart.df, class)
column.classes <- lapply(heart.df, class)
column.classes <- lapply(heart.df, typeof)
View(column.classes)
data_types <- function(frame) {
res <- lapply(frame, class)
res_frame <- data.frame(unlist(res))}
data_types(heart.df)
knitr::opts_chunk$set(echo = TRUE,
cache = FALSE,
out.width = "100%",
warning = FALSE,
message = FALSE)
heart.df <- read_sas("../../Data/thoracic_data.sas7bdat")
cat(paste("We have read the SAS Dataset into a data.frame (df) titled heart.df.", "The df consists of ", nrow(heart.df)," and ",
ncol(heart.df),". Additionally, R initially divides the columns of different types. We visualize these in the interactive chart below."))
res <- lapply(frame, class)
res_frame <- data.frame(unlist(res))
a <- table(res_frame)
View(res_frame)
View(res)
res <- lapply(heart.df, class)
res_frame <- data.frame(unlist(res))
View(res_frame)
a <- table(res_frame)
a
View(a)
a
a <- data.frame(a)
View(a)
a
a <- a[order(Freq),]
a <- a[order(a$Freq),]
a
a <- as.vector(a)
View(a)
p_load(naniar)
heart.df %>% as_shadow_upset() %>% upset()
p_load(UpSetR)
heart.df %>% as_shadow_upset() %>% upset()
window()
windows()
heart.df %>% as_shadow_upset() %>% upset()
p_load(DataExplorer)
plot_missing(heart.df)
heart.df.na <- is.na(heart.df) %>% colSums() %>% `/`(nrow(heart.df))
summary(heart.df)
summary(heart.df.na)
heart.df.na %>%  order(decreasing = T)
heart.df.na[1]
heart.df.na[10]
which(heart.df.na==0)
which(heart.df.na==0) %>%  names()
vars.zero.missing <- which(heart.df.na==0)
names(vars.zero.missing)
which(heart.df.na==0) %>% length()
heart.df.na <- is.na(heart.df) %>% colSums()
which(heart.df.na==0) %>% length()
summary(heart.df.na)
heart.df.na <- is.na(heart.df) %>% colSums() %>%
`/`(nrow(heart.df)) %>% `*`(100) # To make it percent
hist(heart.df.na)
plot_ly(x=~heart.df.na, type = "histogram")
plotly::plot_ly(x=~heart.df.na, type = "histogram")
library(plotly)
plot_ly(x=~heart.df.na, type = "histogram",
xlab="Percent Missing",
ylab="Number of Variables")
d <- data.types(heart.df)
source("Functions.R")
source("functions.R")
d <- data.types(heart.df)
View(d)
d.index < data.types(heart.df) %>% which()=="numeric"
d.index < data.types(heart.df) %>% select(col.classes.df=="numeric")
d.index <- data.types(heart.df) %>% select(col.classes.df=="numeric")
numeric.index <- data.types(heart.df)
numeric.index <- which(numeric.index$col.classes.df=="numeric")
numeric.index
d.index <- data.types(heart.df) %>% which(col.classes.df=="numeric")
heart.df.na.quantiles <- quantile(heart.df.na)
heart.df.na.quantiles
index <- which(heart.df.na > 5 && heart.df.na< 95)
which(heart.df.na>5)
windows()
plot_missing(heart.df)
col.classes.df = data.types(heart.df)
save(col.classes.df, "../Results/ETL_ColumnTypes.RData")
save(col.classes.df, file = "../Results/ETL_ColumnTypes.RData")
load(file = "../Results/ETL_ColumnTypes.RData")
View(col.classes.df)
a <- data.types(heart.df)
# Reading the data
heart.df <- read_sas("../../Data/thoracic_data.sas7bdat")
cat(paste("We have read the SAS Dataset into a data.frame (df) titled heart.df.", "The df consists of ", nrow(heart.df)," and ",
ncol(heart.df),". Additionally, R initially divides the columns of different types. We summarize these in the table below."))
data.types(heart.df) # see functions.R file
source("functions.R")
data.types(heart.df) # see functions.R file
View(data.types)
types <- data.types(heart.df)
heart.df.na <- is.na(heart.df) %>% colSums() %>%
`/`(nrow(heart.df)) %>% `*`(100) # To make it percent
which(heart.df.na>=5)
c(which(heart.df.na>=5), which(heart.df.na<=50))
index <- c(which(heart.df.na>=5), which(heart.df.na<=50))
heart.na.plot <- heart.df[,c(index)] %>% plot_missing()
index <- c(which(heart.df.na>=5), which(heart.df.na<=50)) %>% unique()
heart.na.plot <- heart.df[,c(index)] %>% plot_missing()
which(heart.df.na>=5)
as.numeric(which(heart.df.na>=5))
index <- c(as.numeric(which(heart.df.na>=5)), as.numeric(which(heart.df.na<=50))) %>% unique()
max(heart.df.na)
median(heart.df.na)
quantile(heart.df.na)
heart.df.na <- is.na(heart.df) %>% colSums() %>%
`/`(nrow(heart.df)) # To make it percent
heart.df.na.quantiles <- quantile(heart.df.na) %>% round(2)
summary(heart.df.na)
plot_ly(x=~heart.df.na, type = "histogram") %>%
layout(xaxis= list(title="Fraction Data Missing Per Variable"),
yaxis= list(title="Number of Variables"))
cat(paste("Based on the plot, we can see that 272 variables out of the 494 have no missing data. Using the quantile funtion in R, the values of the first, second, and third quantiles (in terms of percent of data missing) correspond to", heart.df.na.quantiles[2],
heart.df.na.quantiles[3],"and",
paste0(heart.df.na.quantiles[4],","),"respectively.",
"Thus, it is imperative to handle these variables."))
cat(paste("Based on the plot, we can see that 272 variables out of the 494 have no missing data. Using the quantile funtion in R, the values of the first, second, and third quantiles (in terms of percent of data missing) correspond to", paste0((100*heart.df.na.quantiles[2]),"%"),
paste0((100*heart.df.na.quantiles[3]),"%"),"and",
paste0((100*heart.df.na.quantiles[4]),"%,"),"respectively.",
"Thus, it is imperative to handle these variables."))
index <- c(as.numeric(which(heart.df.na>=0.05)), as.numeric(which(heart.df.na<=0.5))) %>% unique()
which(heart.df.na<=0.5)
as.numeric(which(heart.df.na<=0.5))) %>% length()
as.numeric(which(heart.df.na<=0.5)) %>% length()
as.numeric(which(heart.df.na>=0.05))
as.numeric(which(heart.df.na>=0.05)) %>%  length()
rm(index)
index <- c(as.numeric(which(heart.df.na>=0.05)), as.numeric(which(heart.df.na<=0.3))) %>% unique()
index <- c(as.numeric(which(heart.df.na>0.05)), as.numeric(which(heart.df.na<0.3))) %>% unique()
index1 <- as.numeric(which(heart.df.na>0.05))
index1 <- as.numeric(which(heart.df.na>0.05 & heart.df<0.5))
index1 <- which(heart.df.na>0.05) %>%  as.numeric()
index2 <- which(heart.df.na< 0.3) %>%  as.numeric()
index <- intersect(index1, index2)
index1 <- which(heart.df.na>0.05) %>%  as.numeric()
index2 <- which(heart.df.na< 0.5) %>%  as.numeric()
index <- intersect(index1, index2)
index1 <- which(heart.df.na>=0.05) %>%  as.numeric()
index2 <- which(heart.df.na< 0.5) %>%  as.numeric()
index1 <- which(heart.df.na>0) %>%  as.numeric()
index2 <- which(heart.df.na< 0.5) %>%  as.numeric()
knitr::opts_chunk$set(echo = TRUE,
cache = FALSE,
out.width = "100%",
warning = FALSE,
message = FALSE)
rm(list = ls()) # clear global environment
graphics.off() # close all graphics
library(pacman) # needs to be installed first
# p_load is equivalent to combining both install.packages() and library()
p_load(haven, dplyr, caret, foreign, glmnet,
lubridate, dataPreparation, httr, DT, stringr, AUC, snow,
testit, caretEnsemble,
C50,
randomForest,
kernlab,
e1071, Boruta,
plotly, DataExplorer)
source("functions.R") # Has our custom functions
# Reading the data
heart.df <- read_sas("../../Data/thoracic_data.sas7bdat")
head(heart.df$TX_YEAR) %>% table()
heart.df[1:100, "TX_YEAR"] %>% table()
heart.df[1:100, "TX_YEAR"]
heart.df[500:1000, "TX_YEAR"] %>% table()
heart.df[500:1000, "TX_YEAR"] %>% summary()
View(heart.df)
heart.df[500:1000, "TX_DATE"] %>% as.numeric() %>%  summary()
knitr::opts_chunk$set(echo = TRUE,
cache = FALSE,
out.width = "100%",
warning = FALSE,
message = FALSE)
rm(list = ls()) # clear global environment
graphics.off() # close all graphics
library(pacman) # needs to be installed first
# p_load is equivalent to combining both install.packages() and library()
p_load(haven, dplyr, caret, foreign, glmnet,
lubridate, dataPreparation, httr, DT, stringr, AUC, snow,
testit, caretEnsemble,
C50,
randomForest,
kernlab,
e1071, Boruta,
plotly, DataExplorer)
source("functions.R") # Has our custom functions
# Reading the data
heart.df <- read_sas("../../Data/thoracic_data.sas7bdat")
cat(paste("We have read the SAS Dataset into a data.frame (df) titled heart.df.", "The df consists of", nrow(heart.df),"and",
paste0(ncol(heart.df),"."),"Additionally, R initially divides the columns of different types. We summarize these in the table below."))
# First tab, where we summarize the column types
cat(paste("###","Column Types","{-}","\n"))
types <- data.types(heart.df) # see functions.R file
types
cat("\n") # Printing a line break
numeric.index <- which(types$classes.df=="numeric")
cat(paste("The reader should note that <b> R </b> reads any variable that purely consists of numeric values to be numeric. However, from a data analysis perspective, a lot of these variables will need to be converted into factors since they represent factor levels rather than numeric values (e.g., donor/recipient ethinicity categories, allocation type, HLA mismatch level, education, etc.). Thus, the",types[numeric.index,2], "numeric variables should be examined more closely to ensure that they are properly coded by the software."))
# Second Tab, where we attempt to summarize the percent missing
cat(paste("###","Fraction Data Missing","{-}","\n"))
heart.df.na <- is.na(heart.df) %>% colSums() %>%
`/`(nrow(heart.df)) # To make it percent
heart.df.na.quantiles <- quantile(heart.df.na) %>% round(2)
cat(paste("Based on the plot, we can see that 272 variables out of the 494 have no missing data. Using the quantile funtion in R, the values of the first, second, and third quantiles (in terms of percent of data missing) correspond to", paste0((100*heart.df.na.quantiles[2]),"%"),
paste0((100*heart.df.na.quantiles[3]),"%"),"and",
paste0((100*heart.df.na.quantiles[4]),"%,"),"respectively.",
"Thus, it is imperative to handle these variables."))
plot_ly(x=~heart.df.na, type = "histogram") %>%
layout(xaxis= list(title="Fraction Data Missing Per Variable"),
yaxis= list(title="Number of Variables"))
# Closer Examination of Percent Data Missing,
cat(paste("###","Missing Data (Sample Columns)","{-}","\n"))
cat("In the plot below, we sample 40 columns at random from the UNOS dataset to show the actual percentage of the data that is missing for each variable. The colors are used to denote the data quality for that column using a traffic light scheme (where green is good and red is bad).")
heart.na.plot <- heart.df[,sample(colnames(heart.df),40)] %>% plot_missing()
?read_sas
eda_numchanges <- read.csv("../Data/records_unique.csv", stringsAsFactors = F)
setwd("J:/Team Drives/CADS - Entrepreneurship in Southwest Ohio/Code")
eda_numchanges <- read.csv("../Data/records_unique.csv", stringsAsFactors = F)
View(eda_numchanges)
eda_numchanges <- read.csv("../Data/records_unique.csv", stringsAsFactors = F)
# Converting date cols. to Date
eda_numchanges$formatted_CreateDate <- as.Date(eda_numchanges[,4]) %>% format("%Y")
eda_numchanges$formatted_ExpiresDate <- as.Date(eda_numchanges[,5]) %>% format("%Y")
library(dplyr)
eda_numchanges <- read.csv("../Data/records_unique.csv", stringsAsFactors = F)
# Converting date cols. to Date
eda_numchanges$formatted_CreateDate <- as.Date(eda_numchanges[,4]) %>% format("%Y")
eda_numchanges$formatted_ExpiresDate <- as.Date(eda_numchanges[,5]) %>% format("%Y")
View(eda_numchanges)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("geojsonio")
